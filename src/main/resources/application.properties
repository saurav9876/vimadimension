# src/main/resources/application.properties
# Set the root log level (e.g., to INFO or DEBUG for more verbosity)
logging.level.root=INFO

# Set the log level specifically for your UserDetailsServiceImpl package/class
# This is useful for getting detailed logs from just this class
logging.level.org.example.service.UserDetailsServiceImpl=DEBUG
# Or, if your UserDetailsServiceImpl is in org.example.security:
# logging.level.org.example.security.UserDetailsServiceImpl=DEBUG

# You can also set the level for Spring Security to see its internal logging
logging.level.org.springframework.security=DEBUG

# ===============================
# DATASOURCE
# ===============================
# Database URL for local MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/project_tracker_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC

# Database Username (update with your local MySQL username)
spring.datasource.username=tracker_app_user

# Database Password (update with your local MySQL password)
spring.datasource.password=your_strong_password

# JDBC Driver (Spring Boot usually auto-detects this for MySQL, but it's good to be explicit)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================
# JPA / HIBERNATE
# ===============================
# Show SQL queries in the console (useful for debugging)
spring.jpa.show-sql=true

# Format SQL queries in the console
spring.jpa.properties.hibernate.format_sql=true

# Hibernate DDL auto-generation strategy.
# Common values:
#   validate: Validates the schema, makes no changes to the database.
#   update: Updates the schema if necessary. Good for development, but use with caution in production.
#   create: Creates the schema, destroying previous data. Good for initial setup or tests.
#   create-drop: Creates the schema, then drops it when the SessionFactory is closed. Good for tests.
#   none: No DDL generation. You manage the schema manually (e.g., with Flyway or Liquibase - recommended for production).
# For initial development, 'update' or 'create' can be convenient.
spring.jpa.hibernate.ddl-auto=update

# MySQL Dialect (Tells Hibernate how to generate MySQL-specific SQL)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Optional: Naming strategy for tables and columns (if you want to customize how JPA maps entity names to DB names)
# spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
